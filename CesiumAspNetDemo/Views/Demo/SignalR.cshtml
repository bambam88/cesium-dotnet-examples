@{
    Layout = null;
    var groupName = "SignalRDemo";
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>SignalR</title>
    <style type="text/css">
        #viewer {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
        }
        #controls {
            background-color: none;
            position: absolute;
            top: 8px;
            left: 8px;
            max-width: 108px;
            z-index: 50;
            color: white;
        }
        #controls button {
            display: inline-block;
            width: 104px;
            min-height: 25px;
            margin-top: 3px;
            margin-bottom: 3px;
        }
    </style>
    <link rel="stylesheet" href="~/Scripts/Cesium/Widgets/widgets.css" />
    <script type="text/javascript" src="~/Scripts/jquery-2.1.4.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script type="text/javascript" src="~/signalr/hubs"></script>
    <script type="text/javascript" src="~/Scripts/Cesium/Cesium.js"></script>
    <script type="text/javascript">

        var czmlDS = null;
        var ko = Cesium.knockout;
        var conn = $.connection.DemoHub;
        
        function FormatDescription(data) {
            var html = "";
            html += "<p>Browser: " + data.Browser + " v" + data.BrowserVersion + "</p>";
            html += "<p>OS: " + data.OS + " v" + data.OSVersion + "</p>";
            html += "<p>Device: " + data.Device + "</p>";
            return html;
        }

        function RandomColor() {
            var letters = '0123456789ABCDEF'.split('');
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        function HtmlColorToRgba(data) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(data.UserColor);
            return result ? [
                parseInt(result[1], 16),    //r
                parseInt(result[2], 16),    //g
                parseInt(result[3], 16),    //b
                255                         //a
            ] : null;
        }

        function DataToCzmlPacket(data) {
            return [{
                id: data.ClientID,
                description: FormatDescription(data),
                point: {
                    color: {
                        rgba: HtmlColorToRgba(data)
                    },
                    pixelSize: {
                        number: 8
                    }
                },
                label: {
                    horizontalOrigin: {
                        horizontalOrigin: "LEFT"
                    },
                    scale: {
                        number: 0.7
                    },
                    text: data.Name + " (" + data.Browser + ", " + data.OS + ")"
                },
                position: {
                    cartographicDegrees: [
                        data.Longitude,
                        data.Latitude,
                        0
                    ]
                }
            }];
        }

        conn.client.NewLocation = function (ua) {
            console.log("Received data");
            var packet = DataToCzmlPacket(ua);
            czmlDS.process(packet).then(function () {
                console.log("Map updated");
            });
        };
        conn.client.OnSubscribed = function (groupName) {
            console.log("subscribed to: " + groupName);
            viewModel.IsConnected(true);
            viewModel.Color(RandomColor());
        };
        conn.client.OnUnsubscribed = function (groupName) {
            console.log("disconnected from: " + groupName);
            viewModel.IsConnected(false);
            viewModel.Name(null);
            viewModel.Color(null);
        }

        function Send(lon, lat) {
            conn.server.sendLocation("@groupName", viewModel.Name(), viewModel.Color(), lon, lat).done(function () {
                console.log("Location sent");
            });
        }

        function ViewModel(conn, viewer) {
            var _viewer = viewer;
            var _this = this;

            this.Name = ko.observable(null);
            this.Color = ko.observable(null);

            this.IsConnected = ko.observable(false);
            this.Connect = function () {
                var name = prompt("What is your name?");
                if (name == null) {
                    alert("A name is required to continue");
                    return;
                }
                _this.Name(name);
                conn.server.subscribe("@groupName");
            };
            this.Disconnect = function () {
                conn.server.unsubscribe("@groupName");
            };
            this.SendMyLocation = function () {
                navigator.geolocation.getCurrentPosition(function (res) {
                    Send(res.coords.longitude, res.coords.latitude);
                });
            };
            this.SendViewCenter = function () {
                var el = document.getElementById("viewer");
                var cx = el.offsetLeft + (el.clientWidth / 2);
                var cy = el.offsetTop + (el.clientHeight / 2);

                var ellipsoid = _viewer.scene.globe.ellipsoid;
                var cartesian = _viewer.camera.pickEllipsoid(new Cesium.Cartesian2(cx, cy), ellipsoid);

                if (cartesian) {
                    var cartographic = ellipsoid.cartesianToCartographic(cartesian);
                    var lon = Cesium.Math.toDegrees(cartographic.longitude).toFixed(10);
                    var lat = Cesium.Math.toDegrees(cartographic.latitude).toFixed(10);
                    //console.log("Looking at: (" + lon + ", " + lat + ")");

                    Send(lon, lat);
                } else {
                    alert("Could get your view center coordinates. Ensure that some part of Earth is in your center view (eg. You're not looking into space)");
                }
            };
        }

        var viewModel = null;

        window.onload = function () {
            var viewer = new Cesium.Viewer("viewer");
            Cesium.CzmlDataSource.load({ id: "document", version: "1.0" }).then(function (ds) {
                czmlDS = ds;
                viewer.dataSources.add(czmlDS);

                $.connection.hub.start().done(function () {
                    viewModel = new ViewModel(conn, viewer);
                    ko.applyBindings(viewModel, document.getElementById("controls"));
                }).fail(function () {
                    alert("Error. Could not connect to SignalR hub");
                });
            });
        };

    </script>
</head>
<body>
    <div id="viewer">
        <div id="controls">
            <button data-bind="disable: IsConnected, click: Connect">Connect</button>
            <button data-bind="enable: IsConnected, click: Disconnect">Disconnect</button>
            <button data-bind="enable: IsConnected, click: SendMyLocation">Send My Location</button>
            <button data-bind="enable: IsConnected, click: SendViewCenter">Send View Center</button>
        </div>
    </div>
</body>
</html>